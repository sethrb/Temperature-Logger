#include <SPI.h> // include the SD library:
#include <SD.h>
#include "Wire.h"
#define DS3231_I2C_ADDRESS 0x68

int sensorPin = 0;
byte red = 2, yellow = 3, green = 4; 
byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;
bool cardRead = 0;
float tempC, tempF;
Sd2Card card; // set up variables using the SD utility library functions:
SdVolume volume;
SdFile root;
File LogFile;
String fileLogName = "tempLog1.txt";
unsigned long previousMillis = 0;
const long intervalLong = 900000; 
const long intervalShort = 1000;
const byte chipSelect = 10;

void setup() // put your setup code here, to run once:
{
  pinMode(red, OUTPUT); pinMode(yellow, OUTPUT);  pinMode(green, OUTPUT);
  Serial.begin(19200);
 // while (!Serial) {// wait for serial port to connect. Needed for native USB port only
 // ;  }
  cardCheck(); 
  if(cardRead){
    flashLED(red, 6, 25); //if can read card flash the red led.
    flashLED(yellow, 4, 50);
    flashLED(green, 5, 75);
   // digitalWrite(green, HIGH);
    delay(5000);
  }
}
void loop() { // put your main code here, to run repeatedly:
  unsigned long currentMillis = millis();

  if(currentMillis - previousMillis >= intervalShort)
  {
    displayTime(); // display the real-time clock data on the Serial Monitor,
    upTimeSecs();
    flashLED(yellow, 2, 50);
  }
  
  if(!cardRead)flashLED(red, 5, 75); //if can't read card flash the red led.
  
  tempC = get_temperature(sensorPin);  // The function needs to know which pin the sensor is hooked up to. 
  tempF = celsius_to_fahrenheit(tempC); //We're using the variable pin for that above   

  
  //tempToSerial();
  if(currentMillis - previousMillis >= intervalLong)
  {
    previousMillis = currentMillis;
    LogFile = SD.open(fileLogName, FILE_WRITE); if(LogFile) flashLED(yellow, 1, 50);
    if (SD.exists(fileLogName)) {
      Serial.print(fileLogName); Serial.println(" exists."); } 
    else { Serial.print(fileLogName);  Serial.println(" doesn't exist."); digitalWrite(red, HIGH);}
      // if the file opened okay, write to it:
    if (LogFile) {
      Serial.print("Writing to test.txt...");
      LogFile.print(tempC); LogFile.print(","); 
      LogFile.print(millis()/1000); LogFile.print(",");
      LogFile.println("PlaceHolder");
      // close the file:
      LogFile.close();
      Serial.println("done.");
   } else {
      Serial.println("error opening test.txt");// if the file didn't open, print an error:
   }
   fileToSerial();
  }
  
}
//**********************************Functions****************************************//
void flashLED(int colorPin, int times, int timeDelay)
{
  byte hold = 0;
    while(hold < times){
      digitalWrite(colorPin, HIGH);
      delay(timeDelay/2);
      digitalWrite(colorPin, LOW);
      delay(timeDelay/2);
      hold++;
    }
}
//********************************SD Card Functions*********************************//
void cardCheck(){
  Serial.print("Initializing SD card...");
  if (!SD.begin(10)) {
    Serial.println("initialization failed!");
    cardRead = 0;
  }
  else{ 
  Serial.println("initialization done.");
   cardRead = 1;
  }
}
bool fileToSerial() { //open the file for reading:
  LogFile = SD.open(fileLogName);
  if (LogFile) {
      Serial.println(fileLogName);
      // read from the file until there's nothing else in it:
      while (LogFile.available()) {
         Serial.write(LogFile.read());
      }
      Serial.println("");
      Serial.println("");
      // close the file:
      LogFile.close();
   } else {
      // if the file didn't open, print an error:
      Serial.println("error opening test.txt");
      return 1;
   }
  LogFile.close();
  return 0;
}
//**********************************Temp Functions***********************************//
float get_temperature(int pin) 
{
  int temperature = analogRead(pin); // Read the value on that pin
  float voltage = temperature * 5.0; // Calculate the temperature based on the reading and send that value back
  voltage = voltage / 1024.0;
  //Serial.print(voltage); Serial.println(" volts");
  tempC = (voltage - 0.5) * 100;
  return (tempC);
}
void tempToSerial()
{
  Serial.print("Degrees C = "); Serial.println(tempC);
  Serial.print("Degrees F = "); Serial.println(tempF);
}
float celsius_to_fahrenheit(float temp) 
{
  return (temp * 9 / 5) + 32;
}
//******************************************************Time Functions***************************//
void upTimeSecs()
{
  Serial.print("Uptime: "); Serial.print((millis()/1000)); Serial.println(" Seconds");
}
byte decToBcd(byte val)
{
  return( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val)
{
  return( (val/16*10) + (val%16) );
}
void setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek, byte
dayOfMonth, byte month, byte year)
{  // sets time and date data to DS3231
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0); // set next input to start at the seconds register
  Wire.write(decToBcd(second)); // set seconds
  Wire.write(decToBcd(minute)); // set minutes
  Wire.write(decToBcd(hour)); // set hours
  Wire.write(decToBcd(dayOfWeek)); // set day of week (1=Sunday, 7=Saturday)
  Wire.write(decToBcd(dayOfMonth)); // set date (1 to 31)
  Wire.write(decToBcd(month)); // set month
  Wire.write(decToBcd(year)); // set year (0 to 99)
  Wire.endTransmission();
}
void readDS3231time(byte *second, byte *minute, byte *hour, byte *dayOfWeek, byte *dayOfMonth,
byte *month, byte *year)
{
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0); // set DS3231 register pointer to 00h
  Wire.endTransmission();
  Wire.requestFrom(DS3231_I2C_ADDRESS, 7);
  // request seven bytes of data from DS3231 starting from register 00h
  *second = bcdToDec(Wire.read() & 0x7f);
  *minute = bcdToDec(Wire.read());
  *hour = bcdToDec(Wire.read() & 0x3f);
  *dayOfWeek = bcdToDec(Wire.read());
  *dayOfMonth = bcdToDec(Wire.read());
  *month = bcdToDec(Wire.read());
  *year = bcdToDec(Wire.read());
}
void displayTime()
{
  // retrieve data from DS3231
  readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month, &year);
  // send it to the serial monitor
  Serial.print(hour, DEC);
  // convert the byte variable to a decimal number when displayed
  Serial.print(":");
  if (minute<10)
  {
    Serial.print("0");
  }
  Serial.print(minute, DEC);
  Serial.print(":");
  if (second<10)
  {
    Serial.print("0");
  }
  Serial.print(second, DEC); Serial.print(" "); Serial.print(dayOfMonth, DEC);
  Serial.print("/"); Serial.print(month, DEC); Serial.print("/");
  Serial.print(year, DEC); Serial.print(" Day of week: ");
  switch(dayOfWeek){
    case 1:
      Serial.println("Sunday");
      break;
    case 2:
      Serial.println("Monday");
      break;
    case 3:
      Serial.println("Tuesday");
      break;
    case 4:
      Serial.println("Wednesday");
      break;
    case 5:
      Serial.println("Thursday");
      break;
    case 6:
      Serial.println("Friday");
      break;
    case 7:
      Serial.println("Saturday");
      break;
    }
}
